name: Build Packages and Release Notes

on:
  push:
    tags:
      - 'release*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x86_64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: x86_64-unknown-linux-gnu

      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev build-essential
          sudo gem install --no-document fpm

      - name: Generate Release Notes
        id: generate_notes
        run: |
          echo "What's Changed" > release_notes.txt
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Comparing changes from $PREVIOUS_TAG to HEAD"
          
          git log --pretty=format:"%s by @%an in #%h" $PREVIOUS_TAG..HEAD >> release_notes.txt

          echo "" >> release_notes.txt
          echo "New Contributors" >> release_notes.txt
          
          git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort | uniq -u | while read contributor; do
            FIRST_PR=$(git log --grep="$contributor" --pretty=format:"%h" --reverse $PREVIOUS_TAG..HEAD | head -n 1)
            echo "@$contributor made their first contribution in #$FIRST_PR" >> release_notes.txt
          done

          echo "" >> release_notes.txt
          echo "Full Changelog: $PREVIOUS_TAG...HEAD" >> release_notes.txt

      - name: Extract Version
        id: extract_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          cargo build --release --target=x86_64-unknown-linux-gnu
          fpm -s dir -t deb target/x86_64-unknown-linux-gnu/release/my_project_name --name=my_project --version=${VERSION} --architecture=${{ matrix.arch }}
          fpm -s dir -t rpm target/x86_64-unknown-linux-gnu/release/my_project_name --name=my_project --version=${VERSION} --architecture=${{ matrix.arch }}

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install nsis
          cargo build --release --target=x86_64-pc-windows-msvc
          
          # 创建 NSIS 脚本
          echo 'OutFile "my_project_installer.exe"' > installer.nsi
          echo 'InstallDir "$PROGRAMFILES\MyProject"' >> installer.nsi
          echo 'RequestExecutionLevel admin' >> installer.nsi
          echo 'Section' >> installer.nsi
          echo '  SetOutPath $INSTDIR' >> installer.nsi
          echo '  File "target/x86_64-pc-windows-msvc/release/my_project_name.exe"' >> installer.nsi
          echo 'SectionEnd' >> installer.nsi
          
          # 生成安装程序
          makensis installer.nsi

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: |
          cargo build --release --target=x86_64-apple-darwin
          # 生成 macOS 包，例如使用 pkgbuild

      - name: Build Source Package
        run: |
          cargo package
          tar -czvf my_project-${VERSION}.tar.gz target/package/my_project-${VERSION}

      - name: Upload to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref }}
          body_path: release_notes.txt
          files: |
            target/x86_64-unknown-linux-gnu/release/my_project_name
            *.deb
            *.rpm
            my_project-${VERSION}.tar.gz
            my_project.exe  # Windows 可执行文件
            my_project_installer.exe  # Windows 安装程序
            my_project.pkg  # macOS 包
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
