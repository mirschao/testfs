name: Build and Release

on:
  push:
    tags:
      - 'release*'

jobs:
  build:
    name: Build for ${{ matrix.os }} on ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: cargo build --release

      - name: Upload binary for Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs artifacts/testfs-linux-${{ matrix.arch }}

      - name: Upload binary for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs.exe artifacts/testfs-windows-${{ matrix.arch }}.exe

      - name: Upload binary for macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs artifacts/testfs-macos-${{ matrix.arch }}
      
      - name: Upload artifacts for later jobs
        uses: actions/upload-artifact@v3
        with:
          name: testfs-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Rename artifact directories
        run: |
          for dir in artifacts/testfs-*; do
            new_dir="${dir/-latest/}"
            mv "$dir" "$new_dir"
          done
          ls artifacts/
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: list dir
        run: |
          ls -l artifacts/

      - name: Upload Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/testfs-linux-x86_64
          asset_name: testfs-linux-x86_64
          asset_content_type: application/octet-stream

      - name: Upload ARM Linux binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/testfs-linux-aarch64
          asset_name: testfs-linux-aarch64
          asset_content_type: application/octet-stream

      - name: Upload Windows binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/testfs-windows-x86_64.exe
          asset_name: testfs-windows-x86_64.exe
          asset_content_type: application/octet-stream

      - name: Upload macOS binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/testfs-macos-x86_64
          asset_name: testfs-macos-x86_64
          asset_content_type: application/octet-stream

      - name: Upload ARM macOS binaries
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/testfs-macos-aarch64
          asset_name: testfs-macos-aarch64
          asset_content_type: application/octet-stream
