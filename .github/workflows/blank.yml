name: Build and Release

on:
  push:
    tags:
      - 'release-*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, ubuntu-latest-arm, macos-latest, macos-latest-arm]
        include:
          - os: windows-latest
            target: 'x86_64'
            output: 'rustfs-win-${{ github.ref_name }}-x86_64.exe'
          - os: ubuntu-latest
            target: 'x86_64'
            output: 'rustfs-linux-${{ github.ref_name }}-x86_64'
          - os: ubuntu-latest-arm
            target: 'arm'
            output: 'rustfs-linux-${{ github.ref_name }}-arm'
          - os: macos-latest
            target: 'x86_64'
            output: 'rustfs-macos-${{ github.ref_name }}-x86_64.dmg'
          - os: macos-latest-arm
            target: 'arm'
            output: 'rustfs-macos-${{ github.ref_name }}-arm.dmg'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Build Project
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cargo build --release
            cp target/release/your_binary.exe ${{ matrix.output }}
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            cargo build --release
            cp target/release/your_binary ${{ matrix.output }}
            fpm -s dir -t rpm --name rustfs-linux --version ${{ github.ref_name }} ${{ matrix.output }} .
            fpm -s dir -t deb --name rustfs-linux --version ${{ github.ref_name }} ${{ matrix.output }} .
            docker build -t rustfs/s3-rustfs:${{ github.ref_name }} .
            docker push rustfs/s3-rustfs:${{ github.ref_name }}
          elif [[ "${{ matrix.os }}" == "ubuntu-latest-arm" ]]; then
            cargo build --release --target=arm-unknown-linux-gnueabi
            cp target/arm-unknown-linux-gnueabi/release/your_binary ${{ matrix.output }}
            fpm -s dir -t rpm --name rustfs-linux --version ${{ github.ref_name }} ${{ matrix.output }} .
            fpm -s dir -t deb --name rustfs-linux --version ${{ github.ref_name }} ${{ matrix.output }} .
            docker build -t rustfs/s3-rustfs:arm-${{ github.ref_name }} .
            docker push rustfs/s3-rustfs:arm-${{ github.ref_name }}
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            cargo build --release
            cp target/release/your_binary ${{ matrix.output }}
          elif [[ "${{ matrix.os }}" == "macos-latest-arm" ]]; then
            cargo build --release --target=aarch64-apple-darwin
            cp target/aarch64-apple-darwin/release/your_binary ${{ matrix.output }}
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output }}
          path: ${{ matrix.output }}

  finalize:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          name: artifacts
          path: artifacts/

      - name: Generate Release Notes
        run: |
          echo "# Release Notes" > release.md
          git log --merges --since="$(date -I)" --pretty=format:'* %h - %s by %an' >> release.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: artifacts/*
          release_name: Release ${{ github.ref_name }}
          body_path: release.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
