name: Build and Release

on:
  push:
    tags:
      - 'release*'

jobs:
  build:
    name: Build for ${{ matrix.os }} on ${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-gnu
          - os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: cargo build --release

      - name: Upload binary for Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs artifacts/testfs-linux-${{ matrix.arch }}

      - name: Upload binary for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs.exe artifacts/testfs-windows-${{ matrix.arch }}.exe

      - name: Upload binary for macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir -p artifacts
          cp target/release/testfs artifacts/testfs-macos-${{ matrix.arch }}
      
      - name: Upload artifacts for later jobs
        uses: actions/upload-artifact@v3
        with:
          name: testfs-${{ matrix.os }}-${{ matrix.arch }}
          path: artifacts/

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: Rename artifact directories
        run: |
          for dir in artifacts/testfs-*; do
            new_dir=$(echo "${dir/-latest/}" | sed 's/ubuntu/linux/')
            if [ "$new_dir" == "testfs-windows-x86_64" ]; then
              mv "$dir" "$new_dir".exe
            else
              mv "$dir" "$new_dir"
            fi
          done
          ls artifacts/
      
      - name: Generate release notes
        id: generate_notes
        run: |
          echo "Changes in this release:" > release_notes.txt
          git log --pretty=format:"- %s by @%an" >> release_notes.txt
          echo "# What's Changed" > reelease_notes.md
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Comparing changes from $PREVIOUS_TAG to HEAD"
            
          # 获取所有的 commit 信息
          git log --pretty=format:"%s by @%an in #%h" $PREVIOUS_TAG..HEAD >> reelease_notes.md
          echo "" >> reelease_notes.md
          echo "# New Contributors" >> reelease_notes.md
            
          # 获取新贡献者
          git log --pretty=format:"%an" $PREVIOUS_TAG..HEAD | sort | uniq -u | while read contributor; do
            FIRST_PR=$(git log --grep="$contributor" --pretty=format:"%h" --reverse $PREVIOUS_TAG..HEAD | head -n 1)
            echo "@$contributor made their first contribution in #$FIRST_PR" >> reelease_notes.md
          done
          echo "" >> reelease_notes.md
          echo "Full Changelog: $PREVIOUS_TAG...HEAD" >> reelease_notes.md
  
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: ${{ env.VERSION }}
          body_path: release_notes.txt  # 使用生成的 release_notes.txt 作为发布说明
          body_path: reelease_notes.md  # 使用生成的 reelease_notes.md 作为发布说明
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}